'use client';

import { useState } from 'react';
import { 
  Download, 
  FileText, 
  FileSpreadsheet, 
  FileJson,
  Copy,
  Mail,
  Share2,
  Check,
  Loader2,
  Image,
  Printer
} from 'lucide-react';
import type { CompetitorData, SearchResult } from '@/types';

interface ExportPanelProps {
  data: SearchResult[] | CompetitorData[];
  title?: string;
  type?: 'search' | 'comparison' | 'analysis';
}

export function ExportPanel({ 
  data, 
  title = 'Export Results',
  type = 'search' 
}: ExportPanelProps) {
  const [isExporting, setIsExporting] = useState(false);
  const [exportFormat, setExportFormat] = useState<'pdf' | 'csv' | 'json' | 'markdown'>('pdf');
  const [copied, setCopied] = useState(false);
  const [emailSent, setEmailSent] = useState(false);
  const [includeOptions, setIncludeOptions] = useState({
    basicInfo: true,
    complaints: true,
    opportunities: true,
    similarTools: false,
    strategies: false,
    successStories: false,
    insights: true,
    charts: true
  });

  // PDFエクスポート
  const exportAsPDF = async () => {
    setIsExporting(true);
    
    // 簡易的なPDF生成（実際にはjsPDFなどのライブラリを使用）
    const content = generatePDFContent();
    
    // HTMLをPDF風にスタイリングして新しいウィンドウで開く
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>${title}</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              padding: 20px;
              max-width: 800px;
              margin: 0 auto;
            }
            h1 { color: #1e40af; border-bottom: 2px solid #3b82f6; padding-bottom: 10px; }
            h2 { color: #1f2937; margin-top: 30px; }
            h3 { color: #4b5563; }
            .tool { 
              border: 1px solid #e5e7eb; 
              padding: 15px; 
              margin: 20px 0;
              border-radius: 8px;
              page-break-inside: avoid;
            }
            .complaint { 
              background: #fef2f2; 
              padding: 8px; 
              margin: 5px 0;
              border-left: 3px solid #ef4444;
            }
            .opportunity { 
              background: #f0fdf4; 
              padding: 8px; 
              margin: 5px 0;
              border-left: 3px solid #10b981;
            }
            .footer { 
              margin-top: 50px; 
              padding-top: 20px; 
              border-top: 1px solid #e5e7eb;
              text-align: center;
              color: #6b7280;
              font-size: 12px;
            }
            @media print {
              .no-print { display: none; }
            }
          </style>
        </head>
        <body>
          ${content}
          <div class="footer">
            Generated by Gap Finder on ${new Date().toLocaleDateString()} 
            | Educational purposes only
          </div>
          <script>window.print();</script>
        </body>
        </html>
      `);
      printWindow.document.close();
    }
    
    setTimeout(() => setIsExporting(false), 1000);
  };

  // CSVエクスポート
  const exportAsCSV = () => {
    setIsExporting(true);
    
    const tools = 'tool' in data[0] 
      ? (data as SearchResult[]).map(r => r.tool)
      : data as CompetitorData[];
    
    const csvData = tools.map(tool => ({
      Name: tool.name,
      Category: tool.category,
      Website: tool.website,
      Pricing: tool.pricing,
      'Market Share': tool.marketShare || '',
      'Top Complaint': tool.userComplaints[0]?.issue || '',
      'Complaint Frequency': tool.userComplaints[0]?.frequency || '',
      'Top Opportunity': tool.industryGaps[0]?.gap || '',
      'Opportunity Potential': tool.industryGaps[0]?.potential || '',
      'Success Probability': tool.industryGaps[0]?.successProbability || '',
      'Similar Tools Count': tool.similarTools.length,
      'Last Updated': tool.lastUpdated
    }));
    
    const headers = Object.keys(csvData[0]);
    const csv = [
      headers.join(','),
      ...csvData.map(row => 
        headers.map(header => {
          const value = row[header as keyof typeof row];
          return typeof value === 'string' && value.includes(',') 
            ? `"${value}"` 
            : value;
        }).join(',')
      )
    ].join('\n');
    
    downloadFile(csv, 'gap-finder-export.csv', 'text/csv');
    setTimeout(() => setIsExporting(false), 500);
  };

  // JSONエクスポート
  const exportAsJSON = () => {
    setIsExporting(true);
    
    const exportData = {
      metadata: {
        title,
        exportDate: new Date().toISOString(),
        toolCount: data.length,
        type,
        disclaimer: 'This data is for educational purposes only'
      },
      data: data,
      options: includeOptions
    };
    
    const json = JSON.stringify(exportData, null, 2);
    downloadFile(json, 'gap-finder-export.json', 'application/json');
    setTimeout(() => setIsExporting(false), 500);
  };

  // Markdownエクスポート
  const exportAsMarkdown = () => {
    setIsExporting(true);
    
    const tools = 'tool' in data[0] 
      ? (data as SearchResult[]).map(r => r.tool)
      : data as CompetitorData[];
    
    let markdown = `# ${title}\n\n`;
    markdown += `*Generated on ${new Date().toLocaleDateString()}*\n\n`;
    markdown += `## Summary\n\n`;
    markdown += `- Total Tools Analyzed: ${tools.length}\n`;
    markdown += `- Categories: ${[...new Set(tools.map(t => t.category))].join(', ')}\n\n`;
    
    tools.forEach((tool, index) => {
      markdown += `## ${index + 1}. ${tool.name}\n\n`;
      markdown += `- **Category:** ${tool.category}\n`;
      markdown += `- **Pricing:** ${tool.pricing}\n`;
      markdown += `- **Market Share:** ${tool.marketShare || 'N/A'}\n`;
      markdown += `- **Website:** [${tool.website}](${tool.website})\n\n`;
      
      if (includeOptions.complaints && tool.userComplaints.length > 0) {
        markdown += `### Top User Complaints\n\n`;
        tool.userComplaints.slice(0, 3).forEach(complaint => {
          markdown += `- **${complaint.issue}** (${complaint.frequency}% users, ${complaint.severity} severity)\n`;
        });
        markdown += '\n';
      }
      
      if (includeOptions.opportunities && tool.industryGaps.length > 0) {
        markdown += `### Market Opportunities\n\n`;
        tool.industryGaps.slice(0, 3).forEach(gap => {
          markdown += `- **${gap.gap}**\n`;
          markdown += `  - Potential: ${gap.potential}\n`;
          markdown += `  - Difficulty: ${gap.difficulty}\n`;
          markdown += `  - Success Rate: ${gap.successProbability}%\n`;
        });
        markdown += '\n';
      }
      
      markdown += '---\n\n';
    });
    
    markdown += `\n## Disclaimer\n\nThis analysis is for educational purposes only. Not intended to criticize any products.\n`;
    
    downloadFile(markdown, 'gap-finder-export.md', 'text/markdown');
    setTimeout(() => setIsExporting(false), 500);
  };

  // PDFコンテンツ生成
  const generatePDFContent = () => {
    const tools = 'tool' in data[0] 
      ? (data as SearchResult[]).map(r => r.tool)
      : data as CompetitorData[];
    
    let html = `<h1>${title}</h1>`;
    html += `<p><strong>Analysis Date:</strong> ${new Date().toLocaleDateString()}</p>`;
    html += `<p><strong>Tools Analyzed:</strong> ${tools.length}</p>`;
    
    tools.forEach(tool => {
      html += `<div class="tool">`;
      html += `<h2>${tool.name}</h2>`;
      html += `<p><strong>Category:</strong> ${tool.category} | <strong>Pricing:</strong> ${tool.pricing}</p>`;
      
      if (includeOptions.complaints && tool.userComplaints.length > 0) {
        html += `<h3>User Complaints</h3>`;
        tool.userComplaints.slice(0, 3).forEach(complaint => {
          html += `<div class="complaint">`;
          html += `<strong>${complaint.issue}</strong> - ${complaint.frequency}% of users (${complaint.severity})`;
          html += `</div>`;
        });
      }
      
      if (includeOptions.opportunities && tool.industryGaps.length > 0) {
        html += `<h3>Opportunities</h3>`;
        tool.industryGaps.slice(0, 2).forEach(gap => {
          html += `<div class="opportunity">`;
          html += `<strong>${gap.gap}</strong><br>`;
          html += `Potential: ${gap.potential} | Difficulty: ${gap.difficulty} | Success: ${gap.successProbability}%`;
          html += `</div>`;
        });
      }
      
      html += `</div>`;
    });
    
    return html;
  };

  // ファイルダウンロード
  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // クリップボードにコピー
  const copyToClipboard = async () => {
    const tools = 'tool' in data[0] 
      ? (data as SearchResult[]).map(r => r.tool)
      : data as CompetitorData[];
    
    const text = tools.map(tool => 
      `${tool.name} (${tool.category}) - ${tool.pricing}`
    ).join('\n');
    
    await navigator.clipboard.writeText(text);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  // メール送信（仮実装）
  const sendByEmail = () => {
    const tools = 'tool' in data[0] 
      ? (data as SearchResult[]).map(r => r.tool)
      : data as CompetitorData[];
    
    const subject = encodeURIComponent(`Gap Finder Analysis - ${title}`);
    const body = encodeURIComponent(
      tools.map(tool => 
        `${tool.name}\nCategory: ${tool.category}\nPricing: ${tool.pricing}\n\n`
      ).join('---\n\n')
    );
    
    window.open(`mailto:?subject=${subject}&body=${body}`);
    setEmailSent(true);
    setTimeout(() => setEmailSent(false), 2000);
  };

  return (
    <div className="bg-white rounded-xl shadow-lg p-6">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">Export Options</h3>
      
      {/* Format Selection */}
      <div className="mb-6">
        <label className="text-sm font-medium text-gray-700 mb-2 block">Export Format</label>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
          <button
            onClick={() => setExportFormat('pdf')}
            className={`p-3 rounded-lg border-2 transition-all ${
              exportFormat === 'pdf' 
                ? 'border-blue-500 bg-blue-50 text-blue-700' 
                : 'border-gray-200 hover:border-gray-300'
            }`}
          >
            <FileText className="h-5 w-5 mx-auto mb-1" />
            <span className="text-xs font-medium">PDF</span>
          </button>
          
          <button
            onClick={() => setExportFormat('csv')}
            className={`p-3 rounded-lg border-2 transition-all ${
              exportFormat === 'csv' 
                ? 'border-blue-500 bg-blue-50 text-blue-700' 
                : 'border-gray-200 hover:border-gray-300'
            }`}
          >
            <FileSpreadsheet className="h-5 w-5 mx-auto mb-1" />
            <span className="text-xs font-medium">CSV</span>
          </button>
          
          <button
            onClick={() => setExportFormat('json')}
            className={`p-3 rounded-lg border-2 transition-all ${
              exportFormat === 'json' 
                ? 'border-blue-500 bg-blue-50 text-blue-700' 
                : 'border-gray-200 hover:border-gray-300'
            }`}
          >
            <FileJson className="h-5 w-5 mx-auto mb-1" />
            <span className="text-xs font-medium">JSON</span>
          </button>
          
          <button
            onClick={() => setExportFormat('markdown')}
            className={`p-3 rounded-lg border-2 transition-all ${
              exportFormat === 'markdown' 
                ? 'border-blue-500 bg-blue-50 text-blue-700' 
                : 'border-gray-200 hover:border-gray-300'
            }`}
          >
            <FileText className="h-5 w-5 mx-auto mb-1" />
            <span className="text-xs font-medium">Markdown</span>
          </button>
        </div>
      </div>

      {/* Include Options */}
      <div className="mb-6">
        <label className="text-sm font-medium text-gray-700 mb-2 block">Include in Export</label>
        <div className="space-y-2">
          {Object.entries(includeOptions).map(([key, value]) => (
            <label key={key} className="flex items-center gap-2 cursor-pointer">
              <input
                type="checkbox"
                checked={value}
                onChange={(e) => setIncludeOptions({
                  ...includeOptions,
                  [key]: e.target.checked
                })}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="text-sm text-gray-700 capitalize">
                {key.replace(/([A-Z])/g, ' $1').trim()}
              </span>
            </label>
          ))}
        </div>
      </div>

      {/* Export Actions */}
      <div className="space-y-3">
        <button
          onClick={() => {
            switch(exportFormat) {
              case 'pdf': exportAsPDF(); break;
              case 'csv': exportAsCSV(); break;
              case 'json': exportAsJSON(); break;
              case 'markdown': exportAsMarkdown(); break;
            }
          }}
          disabled={isExporting}
          className="w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 transition-colors flex items-center justify-center gap-2"
        >
          {isExporting ? (
            <>
              <Loader2 className="h-5 w-5 animate-spin" />
              Exporting...
            </>
          ) : (
            <>
              <Download className="h-5 w-5" />
              Export as {exportFormat.toUpperCase()}
            </>
          )}
        </button>

        <div className="grid grid-cols-3 gap-2">
          <button
            onClick={copyToClipboard}
            className="p-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center justify-center gap-2"
          >
            {copied ? (
              <>
                <Check className="h-4 w-4 text-green-600" />
                <span className="text-xs">Copied!</span>
              </>
            ) : (
              <>
                <Copy className="h-4 w-4" />
                <span className="text-xs">Copy</span>
              </>
            )}
          </button>
          
          <button
            onClick={sendByEmail}
            className="p-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center justify-center gap-2"
          >
            {emailSent ? (
              <>
                <Check className="h-4 w-4 text-green-600" />
                <span className="text-xs">Sent!</span>
              </>
            ) : (
              <>
                <Mail className="h-4 w-4" />
                <span className="text-xs">Email</span>
              </>
            )}
          </button>
          
          <button
            onClick={() => window.print()}
            className="p-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center justify-center gap-2"
          >
            <Printer className="h-4 w-4" />
            <span className="text-xs">Print</span>
          </button>
        </div>
      </div>

      {/* Export Info */}
      <div className="mt-4 p-3 bg-gray-50 rounded-lg">
        <p className="text-xs text-gray-600">
          <strong>Note:</strong> Exported data includes {data.length} items. 
          All exports include a disclaimer for educational use only.
        </p>
      </div>
    </div>
  );
}